reset;
option solver gurobi;

model Q1-parameters.mod;

param y{N} default 0; # install device at node n?

param d{N, N} default 999999;  # Distance matrix
param M{N, N} default 0;  # Reachability matrix

param searched{N} default 0;
param served{N} default 0;

set notServed := setof{i in N : served[i] = 0} i;
set notSearched := setof{i in N : searched[i] = 0} i;
param nodeValues{i in N} := c[i] / (1 + sum {k in notServed} M[i, k]);

set cheapestNodes ordered := setof{i in notSearched : nodeValues[i] = min{j in notSearched} nodeValues[j]} i;
param cheapestNode;

param start_time;
param end_time;

for {inst in 1..4} {
    printf "\n========================================\n";
    printf "INSTANCE %d\n", inst;
    printf "========================================\n";

    # Reset and load data
    reset data;
    data ("q1-instance-" & inst & ".dat");

	let start_time := _ampl_time;

    for {i in N} {
        let d[i,i] := 0;
    }
    for {(i,j) in E} {
        let d[i,j] := t[i,j];
        let d[j,i] := t[i,j];
    }
    for {k in N} {
        for {i in N} {
            for {j in N} {
                if d[i,k] + d[k,j] < d[i,j] then
                    let d[i,j] := d[i,k] + d[k,j];
            }
        }
    }
    for {i in N} {
        for {j in N} {
            if d[i,j] <= T then
                let M[i,j] := 1;
        }
    }
    
    repeat {
		let cheapestNode := first(cheapestNodes);
        let searched[cheapestNode] := 1;

        for{i in notServed : M[i, cheapestNode] = 1} let served[i] := 1;
        
        let y[cheapestNode] := 1;
    } while (card(notServed) > 0);

	let end_time := _ampl_time;

    printf "objective function: %d ( %.3f s )\n", sum{i in N} y[i] * c[i], end_time - start_time;
    printf "Selected nodes: ";
    for {i in N: y[i] > 0.5} {
        printf "%d ", i;
    }
    printf "\n";
}
